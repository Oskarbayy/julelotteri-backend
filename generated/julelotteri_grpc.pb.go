// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: julelotteri.proto

package julelotteri

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LotteriService_GetWinner_FullMethodName  = "/julelotteri.LotteriService/GetWinner"
	LotteriService_GetPlayers_FullMethodName = "/julelotteri.LotteriService/GetPlayers"
)

// LotteriServiceClient is the client API for LotteriService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LotteriServiceClient interface {
	GetWinner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Player, error)
	GetPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayerList, error)
}

type lotteriServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLotteriServiceClient(cc grpc.ClientConnInterface) LotteriServiceClient {
	return &lotteriServiceClient{cc}
}

func (c *lotteriServiceClient) GetWinner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Player, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Player)
	err := c.cc.Invoke(ctx, LotteriService_GetWinner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotteriServiceClient) GetPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayerList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerList)
	err := c.cc.Invoke(ctx, LotteriService_GetPlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LotteriServiceServer is the server API for LotteriService service.
// All implementations must embed UnimplementedLotteriServiceServer
// for forward compatibility
type LotteriServiceServer interface {
	GetWinner(context.Context, *emptypb.Empty) (*Player, error)
	GetPlayers(context.Context, *emptypb.Empty) (*PlayerList, error)
	mustEmbedUnimplementedLotteriServiceServer()
}

// UnimplementedLotteriServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLotteriServiceServer struct {
}

func (UnimplementedLotteriServiceServer) GetWinner(context.Context, *emptypb.Empty) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWinner not implemented")
}
func (UnimplementedLotteriServiceServer) GetPlayers(context.Context, *emptypb.Empty) (*PlayerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayers not implemented")
}
func (UnimplementedLotteriServiceServer) mustEmbedUnimplementedLotteriServiceServer() {}

// UnsafeLotteriServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LotteriServiceServer will
// result in compilation errors.
type UnsafeLotteriServiceServer interface {
	mustEmbedUnimplementedLotteriServiceServer()
}

func RegisterLotteriServiceServer(s grpc.ServiceRegistrar, srv LotteriServiceServer) {
	s.RegisterService(&LotteriService_ServiceDesc, srv)
}

func _LotteriService_GetWinner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteriServiceServer).GetWinner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LotteriService_GetWinner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteriServiceServer).GetWinner(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LotteriService_GetPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteriServiceServer).GetPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LotteriService_GetPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteriServiceServer).GetPlayers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LotteriService_ServiceDesc is the grpc.ServiceDesc for LotteriService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LotteriService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "julelotteri.LotteriService",
	HandlerType: (*LotteriServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWinner",
			Handler:    _LotteriService_GetWinner_Handler,
		},
		{
			MethodName: "GetPlayers",
			Handler:    _LotteriService_GetPlayers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "julelotteri.proto",
}
